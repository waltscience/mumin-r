# plot ln(anpp) ~ treatment(n)
colorder <- c( "grey48", "royalblue3")
dat$N <- as.factor(dat$N)
b <- ggplot(dat, aes(factor(N), ln_anpp, fill = N)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "royalblue3"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
scale_fill_manual(values = c( "grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
labs(y = expression(ln ~ (Aboveground ~ net ~ primary ~ productivity ~ g ~ m^{-2})),
x = "N level") +
scale_x_discrete(labels = c("Ambient N","N fertilized")) +
geom_jitter(color="black", size=0.4, alpha=0.9)
b + theme_few()
# plot ln(anpp) ~ p:ai
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
newdat <- newdat[order(newdat$P), ]
p0 <- lm(fit ~ AI, data = newdat[1:8,])$coefficients
p1 <- lm(fit ~ AI, data = newdat[9:16,])$coefficients
s <- ggplot(dat, aes(x = AI, y = ln_anpp, colour = factor(P))) +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(ln ~ (Aboveground ~ net ~ primary ~ productivity ~ g ~ m^{-2})), x = "Aridity index")
s + theme_few()
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat
newdat <- newdat[order(newdat$P), ]
newdat
# plot ln(anpp) ~ p:ai
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
newdat <- newdat[order(newdat$P), ]
newdat
p0 <- lm(fit ~ AI, data = newdat[1:8,])$coefficients
p1 <- lm(fit ~ AI, data = newdat[9:16,])$coefficients
po
p0
ggplot(newdat, aes(x = AI, y = ln_anpp, colour = factor(P)))
ggplot(newdat, aes(x = AI, y = fit, colour = factor(P)))
ggplot(newdat, aes(x = AI, y = fit))
ggplot(newdat, aes(x = AI, y = fit, colour = factor(P)))+
geom_point(size = 2, alpha = 0.8)
newdat
ggplot(newdat, aes(x = AI, y = fit, colour = factor(P)))+
geom_point(size = 2, alpha = 0.8)
ggplot(newdat, aes(x = AI, y = fit, colour = factor(P)))+
geom_point(size = 2, alpha = 0.8)+
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
s <- ggplot(dat, aes(x = AI, y = ln_anpp, colour = factor(P))) +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(ln ~ (Aboveground ~ net ~ primary ~ productivity ~ g ~ m^{-2})), x = "Aridity index")
ggplot(newdat, aes(x = AI, y = fit, colour = factor(P)))+
geom_point(size = 2, alpha = 0.8)+
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3")
s <- ggplot(dat, aes(x = AI, y = ln_anpp, colour = factor(P))) +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(ln ~ (Aboveground ~ net ~ primary ~ productivity ~ g ~ m^{-2})), x = "Aridity index")
s + theme_few()
coef(bestmod)
# plot ln(anpp) ~ p:ai
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
newdat
# set response variable
rv <- "rmf_rss"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 3
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 3)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# plot rmf_rss ~ treatment(n)
colorder <- c( "grey48", "royalblue3")
dat$N <- as.factor(dat$N)
b <- ggplot(dat, aes(factor(N), rmf_rss, fill = N)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "royalblue3"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
scale_fill_manual(values = c( "grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
labs(y = expression(Root ~ mass ~ fraction ~ of ~ RSS ~ (g ~ m^{-2})),
x = "N level") +
scale_x_discrete(labels = c("Ambient N","N fertilized")) +
geom_jitter(color="black", size=0.4, alpha=0.9)
b + theme_few()
# plot rmf_rss ~ N:N_Dep
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
newdat <- newdat[order(newdat$N), ]
n0 <- lm(fit ~ N_Dep, data = newdat[1:8,])$coefficients
n1 <- lm(fit ~ N_Dep, data = newdat[9:16,])$coefficients
s <- ggplot(dat, aes(x = N_Dep, y = rmf_rss, colour = factor(N))) +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = c( "grey48", "royalblue4")) +
geom_abline(size = 1.5, intercept = n0[1], slope = n0[2], color = "grey48") +
geom_abline(size = 1.5, intercept = n1[1], slope = n1[2], color = "royalblue4") +
scale_color_manual(values = c("grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name = "N level") +
labs(y = expression(ln ~ (Root ~ mass ~ fraction ~ of ~ RSS ~ g ~ m^{-2})),
x = expression(Nitrogen ~ deposition ~ kg ~ ha^{-1}))
s + theme_few()
# plot ln(anpp) ~ treatment(n)
colorder <- c( "grey48", "royalblue3")
dat$N <- as.factor(dat$N)
b <- ggplot(dat, aes(factor(N), anpp, fill = N)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "royalblue3"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
scale_fill_manual(values = c( "grey48", "royalblue4"),
labels = c("Ambient N","N fertilized"),
name ="N level") +
labs(y = expression(ln ~ (Aboveground ~ net ~ primary ~ productivity ~ g ~ m^{-2})),
x = "N level") +
scale_x_discrete(labels = c("Ambient N","N fertilized")) +
geom_jitter(color="black", size=0.4, alpha=0.9)
b + theme_few()
require(readr, MuMIn)
require(c(readr, MuMIn))
packages <- c(readr, MuMIn)                             # packages you will need
packages <- c("readr", "MuMIn")                             # packages you will need
lapply(Packages, require, character.only = TRUE)
lapply(packages, require, character.only = TRUE)
packages <- c("readr", "MuMIn")                             # packages you will need
lapply(packages, require)
packages <- c("readr", "MuMIn")                             # packages you will need
lapply(packages, require, character.only = TRUE)
packages <- c("readr", "MuMIn")                             # packages you will need
lapply(packages, require, character.only = TRUE)            # install and / or load packages
dat <- read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/understory.csv"))                               # load data from url
dat
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/understory.csv")))                               # load data from url
dat
# load packages and data
packages <- c("readr", "MuMIn")                         # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/understory.csv")))
View(dat)
# load packages and data
packages <- c("readr", "MuMIn")                         # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/understory.csv")))
dat
# load packages and data
packages <- c("readr", "MuMIn")                         # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/countyhealth/master/healthdata.csv")))
View(dat)
# load packages and data
packages <- c("readr", "MuMIn", "lme4")                         # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/countyhealth/master/healthdata.csv")))
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
drivingalone +
population,
random = ~ 1 | state/county, data = dat, method = "ML")
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
drivingalone +
population,
random = ~ 1 | state/county, data = dat, method = "ML")
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
drivingalone +
population,
random = ~ 1 | state/county, data = dat, method = "ML")
View(dat)
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
drivingalone +
population,
random = ~ 1 | state/county, data = dat, method = "ML")
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
drivingalone +
population,
random = ~ 1 | state/county, data = dat, method = "ML")
modfit1 <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
av <- model.avg(modfit1, subset = delta < 3)
mod <- lme(diabetesprevalence ~
smoking *
foodenvironment *
physicalinactivity *
accesstoexercise *
excessivedrinking *
drivingalone *
population,
random = ~ 1 | state/county, data = dat, method = "ML")
mod <- lme(diabetesprevalence ~
smoking*
foodenvironment*
physicalinactivity*
accesstoexercise*
excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML")
mod <- lme(diabetesprevalence ~
smoking*
foodenvironment*
physicalinactivity,
random = ~ 1 | state/county, data = dat, method = "ML")
modfit1 <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 3)
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
bestmod <- eval(parse(text = paste("lme(diabetesprevalence ~ ", vrs$nam, ")")))
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | state/county, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(diabetesprevalence ~ ", vrs$nam, ")")))
summary(bestmod)
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML")
modfit1 <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML")
modfit1 <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
packages <- c("readr", "MuMIn", "lme4")                 # packages you will need
lapply(packages, require, character.only = TRUE)        # install and / or load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML")
modfit1 <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
moddredge <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
plot(moddreddge, labAsExpr = TRUE)
plot(moddredge, labAsExpr = TRUE)
plot(moddredge, labAsExpr = TRUE)
plot(moddredge, labAsExpr = FALSE)
plot(moddredge, labAsExpr = TRUE)
plot(moddredge)
plot(moddredge)
moddredge
View(moddredge)
dim(moddredge)
packages <- c("readr", "MuMIn", "lme4")                   # packages you will need
lapply(packages, install.packages, character.only = TRUE)           # install packages
lapply(packages, library, character.only = TRUE)                    # install packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(
diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML"
)
lapply(packages, library, character.only = TRUE)                    # load packages
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/mumin-r/master/healthdata.csv")))
mod <- lme(
diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML"
)
library(lme4)
mod <- lme(
diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML"
)
packages <- c("readr", "MuMIn", "nlme")                   # packages you will need
lapply(packages, library, character.only = TRUE)                    # load packages
mod <- lme(
diabetesprevalence ~
smoking +
foodenvironment +
physicalinactivity +
accesstoexercise +
excessivedrinking +
smoking:foodenvironment +
smoking:physicalinactivity +
smoking:accesstoexercise +
smoking:excessivedrinking +
foodenvironment:physicalinactivity +
foodenvironment:accesstoexercise +
foodenvironment:excessivedrinking +
physicalinactivity:accesstoexercise +
physicalinactivity:excessivedrinking +
accesstoexercise:excessivedrinking,
random = ~ 1 | state/county, data = dat, method = "ML"
)
View(mod)
moddredge <- dredge(mod, extra = c("R^2", F = function(x)summary(x)$fstatistic[[1]]))
plot(moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3, ])
plot(moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ]
)
moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ]
plot(moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ], labAsExpr = TRUE)
plot(moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ], labAsExpr = TRUE)
mods3 <- moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ], labAsExpr = TRUE)
mods3 <- moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ]
View(mods3)
plot(mods3, labAsExpr = TRUE)
mods3 <- moddredge[which(moddredge$AICc <= min(moddredge$AICc) + 3), ]
plot(mods3, labAsExpr = TRUE)
plot(mods3, labAsExpr = TRUE)
av <- model.avg(moddredge, subset = delta < 3)
